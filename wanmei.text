apply plugin: 'com.android.application'
import com.google.gson.Gson

import java.text.SimpleDateFormat
import java.util.zip.ZipEntry
import java.util.zip.ZipOutputStream

def getDate = { ->
    def date = new Date()
    def formattedDate = date.format('yyyyMMdd')
    return formattedDate
}

def versionDescription = "versionDescription"

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"

    defaultConfig {
        applicationId "com.jason.myapp"
        minSdkVersion 17
        targetSdkVersion 29
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    flavorDimensions 'wang'
    productFlavors {
        base {
            dimension 'wang'
            applicationId "com.jason.base"
            versionCode 1
            versionName "${getDate}-1.1."
        }
        form {
            dimension 'wang'
            applicationId "com.jason.form"
            versionCode 1
            versionName "${getDate}-1.2."
        }

    }
    def versionPropsFile = file('version.properties')
    if (versionPropsFile.canRead()) {
        Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionPropsFile))
        def runTasks = gradle.getStartParameter().taskNames
        productFlavors.each { flavor ->
            flavor.versionCode = versionProps["VERSION_CODE_${flavor.name}"].toInteger()
            flavor.versionName = flavor.versionName + String.valueOf(++flavor.versionCode)
            def taskname = ":myapp:assemble${flavor.name.capitalize()}Release"
            runTasks.each { info ->
                if (info == taskname) {
                    versionProps["VERSION_CODE_${flavor.name}"] = String.valueOf(flavor.versionCode)
                    versionProps.store(versionPropsFile.newWriter(), null)
                }
            }
        }
    } else {
        throw new GradleException("Could not read version.properties!")
    }
    android.applicationVariants.all { variant ->
        println variant.name
        variant.outputs.all {
            if (outputFileName.endsWith(".apk")) {
                if ('release'.equals(variant.buildType.name)) {
                    def appName = "app-TemperatureMeasureBaseVersion"
                    def flavorName = variant.productFlavors[0].name
                    def apkType = variant.buildType.name
                    def verName = variant.versionName
                    def fileName = appName + "-" + flavorName + "-" + apkType + "-" + verName + ".apk"
                    outputFileName = fileName
                }
            }
        }
    }
}
this.gradle.buildFinished {
    def runTasks = gradle.getStartParameter().taskNames
    android.applicationVariants.all { variant ->
        variant.outputs.all {
            if ('release'.equals(variant.buildType.name)) {
                def flavorName = variant.productFlavors[0].name
                def verName = variant.versionName
                def fileName = "app-TemperatureMeasureBaseVersion" + "-" + flavorName + "-" + variant.buildType.name + "-" + verName + ".apk"
                def path = "${buildDir}/../${flavorName}/release/"
//                def pathT = "./${flavorName}/release/"
                def taskname = ":myapp:assemble${flavorName.capitalize()}Release"
                runTasks.each { info ->
                    if (info == taskname) {
                        createVersionFile(new AppVersion(verName, variant.versionCode, fileName, versionDescription), variant.applicationId, path)

                        zipFiles(new File(new File(path + fileName).absolutePath), new File(new File(path+variant.applicationId + ".zip").absolutePath));

                    }
                }
            }
        }
    }
}
dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}

def createVersionFile(AppVersion appVersion, String localApplicationId, String workfolder) {
    def apkFile = new File("$workfolder" + appVersion.apkName)
    if (apkFile.exists()) {
        appVersion.fileLength = apkFile.length()
    }
    appVersion.setBuildTime(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date()))
    def versionJsonFile = new File("$workfolder${localApplicationId}.json")
    if (versionJsonFile.exists()) {
        versionJsonFile.delete()
    }
    versionJsonFile.createNewFile()
    def out = new BufferedWriter(new FileWriter(versionJsonFile))
    out.write(new Gson().toJson(appVersion))
    out.close()
}

class AppVersion {
    def versionName
    def versionCode
    def apkName
    def versionDescription
    def fileLength
    def buildTime
    AppVersion(
        def versionName,
        def versionCode,
        def apkName,
        def versionDescription) {
        this.versionName = versionName
        this.versionCode = versionCode
        this.apkName = apkName
        this.versionDescription = versionDescription
        this.fileLength = fileLength
    }
}

static void zipFiles(File srcFiles, File zipFile) {
    // 判断压缩后的文件存在不，不存在则创建
    if (!zipFile.exists()) {
        try {
            zipFile.createNewFile();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    // 创建 FileOutputStream 对象
    FileOutputStream fileOutputStream = null;
    // 创建 ZipOutputStream
    ZipOutputStream zipOutputStream = null;
    // 创建 FileInputStream 对象
    FileInputStream fileInputStream = null;

    try {
        // 实例化 FileOutputStream 对象
        fileOutputStream = new FileOutputStream(zipFile);
        // 实例化 ZipOutputStream 对象
        zipOutputStream = new ZipOutputStream(fileOutputStream);
        // 创建 ZipEntry 对象
        ZipEntry zipEntry = null;
        // 遍历源文件数组

        // 将源文件数组中的当前文件读入 FileInputStream 流中
        fileInputStream = new FileInputStream(srcFiles);
        // 实例化 ZipEntry 对象，源文件数组中的当前文件
        zipEntry = new ZipEntry(srcFiles.getName());
        zipOutputStream.putNextEntry(zipEntry);
        // 该变量记录每次真正读的字节个数
        int len;
        // 定义每次读取的字节数组
        byte[] buffer = new byte[1024];
        while ((len = fileInputStream.read(buffer)) > 0) {
            zipOutputStream.write(buffer, 0, len);
        }

        zipOutputStream.closeEntry();
        zipOutputStream.close();
        fileInputStream.close();
        fileOutputStream.close();
    } catch (IOException e) {
        e.printStackTrace();
    }

}





